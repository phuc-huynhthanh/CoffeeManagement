import { db } from "../config/db.conf.js";

export const ToppingModel = {
  // üìã L·∫•y t·∫•t c·∫£ topping
  async layTatCa() {
    const [rows] = await db.query(`SELECT * FROM topping`);
    return rows;
  },

  // üîç T√¨m topping theo ID
  async timTheoId(id) {
    const [rows] = await db.query(
      `SELECT * FROM topping WHERE topping_id = ?`,
      [id]
    );
    return rows[0];
  },

  // üîé T√¨m topping theo ƒëi·ªÅu ki·ªán (vd: theo t√™n, gi√°)
 async timTheoDieuKien(dieu_kien) {
  const entries = Object.entries(dieu_kien);
  if (entries.length === 0)
    throw new Error("H√†m timTheoDieuKien() c·∫ßn √≠t nh·∫•t 1 ƒëi·ªÅu ki·ªán.");

  // D√πng backtick ƒë·ªÉ b·∫£o v·ªá t√™n c·ªôt kh·ªèi b·ªã MySQL hi·ªÉu sai
  const whereClause = entries.map(([col]) => `\`${col}\` = ?`).join(" AND ");
  const values = entries.map(([_, val]) => val);

  // In ra c√¢u query ƒë·ªÉ debug n·∫øu c·∫ßn
  console.log("WHERE:", whereClause);
  console.log("VALUES:", values);

  // Th·ª±c thi truy v·∫•n an to√†n
  const [rows] = await db.query(
    `SELECT * FROM \`topping\` WHERE ${whereClause}`,
    values
  );

  return rows;
},

  // ‚ûï Th√™m topping m·ªõi
  async them({ ten_topping, gia_them }) {
    const [result] = await db.query(
      `INSERT INTO topping (ten_topping, gia_them) VALUES (?, ?)`,
      [ten_topping, gia_them]
    );
    return result.insertId;
  },

  // ‚úèÔ∏è C·∫≠p nh·∫≠t topping
  async capNhat(id, { ten_topping, gia_them }) {
    const [result] = await db.query(
      `UPDATE topping SET ten_topping = ?, gia_them = ? WHERE topping_id = ?`,
      [ten_topping, gia_them, id]
    );
    return result.affectedRows;
  },

  // ‚ùå X√≥a topping
  async xoa(id) {
    const [result] = await db.query(
      `DELETE FROM topping WHERE topping_id = ?`,
      [id]
    );
    return result.affectedRows;
  },
};
